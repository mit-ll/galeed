diff --git a/modules/libpref/Preferences.cpp b/modules/libpref/Preferences.cpp
index 39212e978530..49d8babeb783 100644
--- a/modules/libpref/Preferences.cpp
+++ b/modules/libpref/Preferences.cpp
@@ -1743,6 +1743,18 @@ bool prefs_parser_parse(const char* aPath, PrefValueKind aKind,
                         PrefsParserPrefFn aPrefFn, PrefsParserErrorFn aErrorFn);
 }
 
+#ifdef _WIN32
+#include <intrin.h>
+#else
+#include <x86intrin.h>
+#endif
+#include <fstream>
+
+inline uint64_t __rdtscp() {
+    unsigned dummy;
+    return __rdtscp(&dummy);
+}
+
 class Parser {
  public:
   Parser() = default;
@@ -1750,8 +1762,20 @@ class Parser {
 
   bool Parse(PrefValueKind aKind, const char* aPath, const nsCString& aBuf) {
     MOZ_ASSERT(XRE_IsParentProcess());
-    return prefs_parser_parse(aPath, aKind, aBuf.get(), aBuf.Length(),
+    auto starttime = __rdtscp();
+    // open file + current_timestamp
+    // Time start
+    auto return_val = prefs_parser_parse(aPath, aKind, aBuf.get(), aBuf.Length(),
                               HandlePref, HandleError);
+    auto endtime = __rdtscp();
+    std::ofstream logfile("/opt/eerivera/firefox/logfiles/example.csv", std::ios_base::app);
+    logfile << "Parser::Parse," << endtime - starttime << "\n";
+    return return_val;
+    // Time end
+    // Write to file
+    // close file
+
+    // Repeat for each function below
   }
 
  private:
diff --git a/modules/libpref/parser/src/lib.rs b/modules/libpref/parser/src/lib.rs
index bce98c06928c..e75ac0f85e7a 100644
--- a/modules/libpref/parser/src/lib.rs
+++ b/modules/libpref/parser/src/lib.rs
@@ -81,6 +81,52 @@
 
 use std::os::raw::{c_char, c_uchar};
 
+use std::alloc::{GlobalAlloc, System, Layout};
+
+static mut MPK_DOMAIN_PRIVATE_ID: i32 = -1;
+
+const PROT_READ: i32 = 0x1;
+const PROT_WRITE: i32 = 0x2;
+const PROT_EXEC: i32 = 0x4;
+const UNSAFE_LANG_PERMISSION: i32 = 2; // 0 = no permission, 1 = read-only, 2 = read-write
+const SHOULD_SYNC: bool = true;
+
+#[link(name="mpk_heap")]
+extern "C" {
+    pub fn mpk_create() -> i32;
+    pub fn mpk_alloc(mpk_id: i32, size: u32) -> *mut u8;
+    pub fn mpk_free(ptr: *mut u8);
+
+    pub fn mpt_update(pkey: i32, prot: i32, synch: bool) -> i32;
+
+    pub fn pkey_alloc(permit: u32, flags: u32) -> i32;
+    pub fn pkey_mprotect(ptr: *mut u8, size: u32, orig_prot: i32, pkey: i32) -> i32;
+}
+
+struct MyAllocator;
+unsafe impl GlobalAlloc for MyAllocator {
+    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
+        if MPK_DOMAIN_PRIVATE_ID == -1 {
+            // MPK_DOMAIN_PRIVATE_ID = pkey_alloc(0,0);
+            MPK_DOMAIN_PRIVATE_ID = mpk_create();
+        }
+        let ptr = mpk_alloc(MPK_DOMAIN_PRIVATE_ID, layout.size() as u32);
+        mpt_update(MPK_DOMAIN_PRIVATE_ID, 2, SHOULD_SYNC);
+        ptr
+        // let new_ptr = System.alloc(layout);
+        // pkey_mprotect(new_ptr, layout.size() as u32, PROT_READ | PROT_WRITE, MPK_DOMAIN_PRIVATE_ID);
+        // new_ptr
+    }
+
+    unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
+        mpk_free(ptr)
+        // System.dealloc(ptr, _layout)
+    }
+}
+
+#[global_allocator]
+static GLOBAL: MyAllocator = MyAllocator;
+
 //---------------------------------------------------------------------------
 // The public interface
 //---------------------------------------------------------------------------
@@ -545,6 +591,7 @@ impl<'t> Parser<'t> {
             }
 
             unsafe {
+                mpt_update(MPK_DOMAIN_PRIVATE_ID, UNSAFE_LANG_PERMISSION, SHOULD_SYNC); // 0 = no permission, 1 = read-only, 2 = read-write
                 (self.pref_fn)(
                     pref_name.as_ptr() as *const c_char,
                     pref_type,
@@ -552,7 +599,8 @@ impl<'t> Parser<'t> {
                     pref_value,
                     is_sticky,
                     is_locked,
-                )
+                );
+                mpt_update(MPK_DOMAIN_PRIVATE_ID, 2, SHOULD_SYNC);
             };
 
             token = self.get_token(&mut none_str);
@@ -572,7 +620,11 @@ impl<'t> Parser<'t> {
         };
         let msg = format!("{}:{}: prefs parse error: {}", self.path, line_num, msg);
         let msg = std::ffi::CString::new(msg).unwrap();
-        unsafe { (self.error_fn)(msg.as_ptr() as *const c_char) };
+        unsafe { 
+            mpt_update(MPK_DOMAIN_PRIVATE_ID, UNSAFE_LANG_PERMISSION, SHOULD_SYNC);
+            (self.error_fn)(msg.as_ptr() as *const c_char);
+            mpt_update(MPK_DOMAIN_PRIVATE_ID, 2, SHOULD_SYNC);
+        };
 
         // "Panic-mode" recovery: consume tokens until one of the following
         // occurs.
diff --git a/toolkit/library/rust/shared/lib.rs b/toolkit/library/rust/shared/lib.rs
index 352a3c0319f2..02dce0b33ec6 100644
--- a/toolkit/library/rust/shared/lib.rs
+++ b/toolkit/library/rust/shared/lib.rs
@@ -222,6 +222,6 @@ mod moz_memory {
     }
 }
 
-#[cfg(feature = "moz_memory")]
-#[global_allocator]
-static A: moz_memory::GeckoAlloc = moz_memory::GeckoAlloc;
+// #[cfg(feature = "moz_memory")]
+// #[global_allocator]
+// static A: moz_memory::GeckoAlloc = moz_memory::GeckoAlloc;
